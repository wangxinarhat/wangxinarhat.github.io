<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangxinarhat&#39;s blog</title>
  <subtitle>王鑫的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-12T06:45:28.879Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangxinarhat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>莱斯特城，书写足球世界最美童话</title>
    <link href="http://yoursite.com/2016/05/08/2016-05-08-leicester-city-champion/"/>
    <id>http://yoursite.com/2016/05/08/2016-05-08-leicester-city-champion/</id>
    <published>2016-05-08T10:00:00.000Z</published>
    <updated>2016-06-12T06:45:28.879Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;莱斯特城夺得2015～2016赛季英超冠军，对于我这个不老不小的中生代球迷而言，并不是球迷生涯当中最激动人心的时刻。&lt;br&gt;感受过希腊神话、阿森纳不败夺冠、伊斯坦布尔奇迹。&lt;br&gt;但是莱斯特城夺冠却给了我最深刻的感动，所以在看了那么多的关于莱斯特城夺冠神话的言论后决定东拼西凑一篇文章以示纪念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是童话&quot;&gt;&lt;a href=&quot;#为什么是童话&quot; class=&quot;headerlink&quot; title=&quot;为什么是童话&quot;&gt;&lt;/a&gt;为什么是童话&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;自从1992年英超联赛另起炉灶创立到现在，除了在1994-1995赛季当时实力不俗的布莱克本搅局之外，其他时候英超联赛就像一副四国军棋。过去的23个赛季中，曼联获得13次冠军，切尔西4次，阿森纳3次，曼城2次，甚至一代霸主红军利物浦还在苦苦追寻。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;从这点来说，上个赛季战战兢兢如履薄冰地保级，赛季初念叨的是如何保级的草根球队莱斯特城能最终夺冠，确实像是童话里才有的故事。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;当然，作为一个百分百的草根球队，莱斯特城能最终举起英超奖杯，也绝对不仅仅是天上掉馅饼，最起码在馅饼掉下来的时候，是它越过竞争对手抓住了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;逆袭的屌丝&quot;&gt;&lt;a href=&quot;#逆袭的屌丝&quot; class=&quot;headerlink&quot; title=&quot;逆袭的屌丝&quot;&gt;&lt;/a&gt;逆袭的屌丝&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;和蔼可亲的意大利老头拉涅利花2700万英镑组织的这支降级热门球队，像是一套少年漫画，像是一部热血电影，或者更像《监狱风云》，但就是不像是一支英超球队。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/football/leicester-players.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舒梅切尔&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;一听就没什么大出息的官二代丹麦守门员，但这回，这个被曼城放弃、一度只能在第四级别联赛踢球的名将之后终于可以摆脱他爹的光环，举起梦寐以求的联赛奖杯；&lt;/li&gt;
&lt;li&gt;胡特&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;曾经出身不错但高开低走，被本国联赛巨子放弃的德国大块头后卫，在辗转米德尔斯堡、斯托克城等英超中下游球队后终于在本赛季打出职业生涯的最高水准，在31岁这个“一枝花”的年纪里大器晚成；&lt;/li&gt;
&lt;li&gt;摩根&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;只身一人从加勒比岛国赴英踢球挣钱，副业还开纹身店的牙买加憨厚黑壮汉；&lt;/li&gt;
&lt;li&gt;辛普森&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;往前往后都冲得跟疯狗一样拼命，折返跑的时候脑子来不及跟上脚步速度的边后卫；&lt;/li&gt;
&lt;li&gt;福克斯&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;名字印在后背上，老是被错看成谩骂标语的奥地利边后卫；&lt;/li&gt;
&lt;li&gt;奥尔布莱顿&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;身为英超冠军队主力的他应该也会想起自己在维拉替补席蹉跎度日的伤心往事——讽刺的是，当年拒绝给他一纸续约的老东家本赛季却提前降入英冠；&lt;/li&gt;
&lt;li&gt;马赫雷斯&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;从北非划船过来，虽然头型挺潮但谁知道是不是 ISIS 阴谋线人的阿尔及利亚难民，却荣获本赛季英超最佳球员，而两年前他还在法乙球队勒阿弗尔效力；&lt;/li&gt;
&lt;li&gt;坎特&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;而5年前还在法国业余联赛陶冶高尚情操——恐怕当时谁也没有想到，5年后这个身材矮小的硬又黑居然能身披法国国家队战袍，为高卢鸡军团征战四方；&lt;/li&gt;
&lt;li&gt;德林克沃特&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;怪得让人不好意思念出他的名字，曼联青训的弃儿，上赛季他才随狐狸城开始踢上英超，此前则一直混迹于英冠、英甲；&lt;/li&gt;
&lt;li&gt;冈崎慎司&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;从德国买过来，但主要擅长在地上爬和打滚的小矮个日本前锋；&lt;/li&gt;
&lt;li&gt;瓦尔迪&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;脑袋空空、戴着拳击绷带上场、张嘴就骂人、只知道傻跑的医疗器械工厂混子，他用6年时间完成了联赛七级跳，一步步从英格兰第8级别联赛爬向英格兰足坛的荣誉最高峰。在瓦尔迪的梦想刚开始之时，他每周的薪水只有区区30英镑，这使得他甚至需要到纤维厂打工以维持生计；&lt;/li&gt;
&lt;li&gt;乌略亚&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;坐在替补席上、长得像小品演员魏积安的大个阿根廷人，如果雷科巴是中国男孩那他就是中国二杆子；&lt;/li&gt;
&lt;li&gt;安迪·金&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;在莱斯特城待了12年，一路不离不弃随球队从英冠降入英甲，再从英甲回到英冠，再从英冠冲上到英超，再从保级队到本赛季的逆袭夺冠——天啊，这真是个令人震撼和感动的该死剧本；&lt;/li&gt;
&lt;li&gt;拉涅利&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;魏积安旁边站着一个慈眉善目、一看就知道辉煌年代已经永远过去，准备靠勤恳一辈子攒起来的名气了此残生的意大利老头……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这些人一半是混了个机会来淘金的，另一半是自认时运不济落魄于此的，每个人在队友眼里的身价都远远低于在自己眼里的身价。一队眼高手低的家伙拼在一起，能否完整踢完两场业余联赛都存疑。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;是的，他们都是普普通通的球员，一步步凭着自己的努力拿到英超冠军。他们原先越是平凡、经历越是曲折，他们的逆袭故事也就越激动人心。人们从他们身上看到了改变命运的可能，见证了一群朴实低调的人是怎样为梦想而努力拼搏直到成功。&lt;/p&gt;
&lt;h2 id=&quot;补锅匠&quot;&gt;&lt;a href=&quot;#补锅匠&quot; class=&quot;headerlink&quot; title=&quot;补锅匠&quot;&gt;&lt;/a&gt;补锅匠&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;也许人们还会喜欢他的谦虚低调和执着。拉涅利熟谙人品定律，言动举止颇得贾子真传，且在低调攒人品这件事上已经走向了不归路。去年12月份当莱斯特城排在榜首的时候，拉涅利表示狐狸的目标是保级；2月中旬他说“阿森纳不夺冠将是灾难”；3月初他又喊出“枪手、热刺是冠军”的口号，其毒奶程度堪比某东方国度的足球App；3月中旬他表示“我们的目标是获得欧联杯资格”，4月中旬说”夺冠需要运气”，到了4月底他又说“我们下赛季的目标是英超前十”。直到同曼联的比赛开始前、距离冠军仅一步之遥的时候，他还不忘怒攒一记：“下赛季的英超是BIG4的天下”，以及——“我尊重范加尔，我们现在还没夺冠呢”。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;只是，攒人品大法终究掩盖不住他的“狐狸尾巴”。在球队在客场2-0战胜桑德兰之后，莱斯特城领先少赛一场的热刺多达10分。转播镜头里，这位老帅鼓着掌走向自己的队员，眼眶里噙满热泪。是的，眼泪不会欺骗人，这位被人们戏称为“补锅匠”的老人一辈子都没拿过联赛冠军，而现在他距离自己的梦想是如此地近。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;直到那一刻，人们才发现，在他那满头的华发、苍老的面容和颤颤巍巍的躯体里，原来隐藏着如此滚烫的一颗冠军的心。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/football/claudio-ranieri-tears.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么人人都希望狐狸城赢&quot;&gt;&lt;a href=&quot;#为什么人人都希望狐狸城赢&quot; class=&quot;headerlink&quot; title=&quot;为什么人人都希望狐狸城赢&quot;&gt;&lt;/a&gt;为什么人人都希望狐狸城赢&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在全球各地，不同大洲、不同国度的人们也都对莱斯特城的最终夺冠翘首以盼——毕竟无论在什么地方，人们都喜欢“灰姑娘”的故事。如果套用巴赫汀的“众声喧哗“理论来解释的话，我们可以发现，不同国度的人看莱斯特城的故事会有着不同的视角，他们总能从自己的国家出发，寻找到和莱斯特城之间的联系，以获得一种缔造神话的参与感。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/football/leicester-illustration-champion.jpg&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;就像一千个读者中心目中有着一千个哈姆雷特那样，每个喜爱莱斯特城的人都能讲出个所以然来。不过这只狐狸之所以能这么摄人魂魄，最大的原因其实在于——它是当今足坛最营养美味的一碗心灵鸡汤。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;在这个阶层流动渐趋阻滞、贫富差距普遍拉大的后现代社会里，足球赛场也多少折射出当今时代的社会文化。以英国为例，加州大学戴维斯分校的史学家格雷戈里-克拉克曾在一份研究中指出：英国社会延续至今的社会阶级体系流动性极低。对于底层的民众而言，他们大致需要历经十代人的时间才可发展为中产阶级。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;所以想想看吧，一支上上赛季刚刚升入顶级联赛，去年还曾一度被认为铁定降级的保级队在本赛季一飞冲天最终折桂，这种绿茵版的“屌丝逆袭”故事自然为普罗大众所喜闻乐见。从这个意义上讲，支持莱斯特城夺冠，不啻是一种在世俗生活里给自己熬一碗心灵鸡汤的行为，仿佛莱斯特城的成功会是自己日后逆袭打脸、走向人生巅峰的一种投射。人们通过“支持蓝狐夺冠”这一举动，有意无意地表达了向上层社会阶级流动的诉求。&lt;/p&gt;
&lt;h2 id=&quot;钱不是万能的，足球是圆的&quot;&gt;&lt;a href=&quot;#钱不是万能的，足球是圆的&quot; class=&quot;headerlink&quot; title=&quot;钱不是万能的，足球是圆的&quot;&gt;&lt;/a&gt;钱不是万能的，足球是圆的&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;比起富可敌国的阿布扎比财团，比离了婚还能富可敌国的阿布，比起银行存款也能富可敌国的阿森纳，莱斯特城是个妥妥的屌丝。联赛MVP马赫雷斯转会费是50万欧元，就算是当红的瓦尔迪转会费也只有120万欧元。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;莱斯特城夺冠的故事，仿佛就让我们回到了那个钱也没那么好使，学习好的家伙不一定混得好、长得最帅的人也会摔一个狗吃屎的年代。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;莱斯特城的成功，说好听点叫：穷且益坚，不坠青云之志！说得俗一点叫：有钱也没什么卵用。&lt;/p&gt;
&lt;h2 id=&quot;为何会成为鸡汤&quot;&gt;&lt;a href=&quot;#为何会成为鸡汤&quot; class=&quot;headerlink&quot; title=&quot;为何会成为鸡汤&quot;&gt;&lt;/a&gt;为何会成为鸡汤&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&amp;emsp;&amp;emsp;人生有三大错觉：手机在震、她喜欢我、我能成功。莱斯特城则告诉了我们，“我能成功”这事还真不是错觉。当我们发现，那个在工厂和工友骂着脏的瓦尔迪，竟然能成为了球场上振臂一呼的英雄。我们的内心是奔腾的。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这就是我们爱看的“屌丝逆袭”，一个从“zero”到“hero”的故事。一个能不断暗示我们“只要努力，你也能行”的故事。我们的内心都住着一个“莱斯特城”。也许他平时看到领导依然会点头哈腰，但心里一直念着“王侯将相宁有种乎？”。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;他可以平庸不出彩。但至少他还有一个梦，就算我们明知那是“天方夜谭”，却始终有那么一种“万一成功了呢”的小确幸。就算明知自己该吃药了，却依然坚信自己有朝一日能成为别人的鸡汤。因为我们这群平凡的人，甚至是卑微的人，仿佛因为它的夺冠，能给予我们力量，能让我们相信脚底这双印满泥印的鞋也可以乘风破浪，仿佛能让我们在哪怕灰暗的灯光下也可以看到窗外的天空。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这种精神力量，未必能帮助你出类拔萃，却能让每一个平凡的你在平凡的生活中有那么一丝动力。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;是的，我们爱的是逆袭的狐狸，是谦逊的拉涅利，是坚毅的瓦尔迪，更是每一个平凡的自己。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;莱斯特城夺得2015～2016赛季英超冠军，对于我这个不老不小的中生代球迷而言，并不是球迷生涯当中最激动人心的时刻。&lt;br&gt;感受过希腊神话、阿森纳不败夺冠、伊斯坦布尔奇迹。&lt;br&gt;但是莱斯特城夺冠却给了我最深刻的感动，所以在看了那么多的关于莱斯特城夺冠神话的言论后决定东拼西凑一篇文章以示纪念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是童话&quot;&gt;&lt;a href=&quot;#为什么是童话&quot; class=&quot;headerlink&quot; title=&quot;为什么是童话&quot;&gt;&lt;/a&gt;为什么是童话&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;自从1992年英超联赛另起炉灶创立到现在，除了在1994-1995赛季当时实力不俗的布莱克本搅局之外，其他时候英超联赛就像一副四国军棋。过去的23个赛季中，曼联获得13次冠军，切尔西4次，阿森纳3次，曼城2次，甚至一代霸主红军利物浦还在苦苦追寻。&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;从这点来说，上个赛季战战兢兢如履薄冰地保级，赛季初念叨的是如何保级的草根球队莱斯特城能最终夺冠，确实像是童话里才有的故事。&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;当然，作为一个百分百的草根球队，莱斯特城能最终举起英超奖杯，也绝对不仅仅是天上掉馅饼，最起码在馅饼掉下来的时候，是它越过竞争对手抓住了。&lt;/p&gt;
    
    </summary>
    
      <category term="football" scheme="http://yoursite.com/categories/football/"/>
    
      <category term="life" scheme="http://yoursite.com/categories/football/life/"/>
    
    
      <category term="Leicester" scheme="http://yoursite.com/tags/Leicester/"/>
    
      <category term="football" scheme="http://yoursite.com/tags/football/"/>
    
      <category term="champion" scheme="http://yoursite.com/tags/champion/"/>
    
      <category term="miracle" scheme="http://yoursite.com/tags/miracle/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符在android中的使用场景详解（二）</title>
    <link href="http://yoursite.com/2016/05/01/2016-05-01-rxjava-android-operate2/"/>
    <id>http://yoursite.com/2016/05/01/2016-05-01-rxjava-android-operate2/</id>
    <published>2016-05-01T10:00:00.000Z</published>
    <updated>2016-06-12T06:45:12.487Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近比较忙，也没想好这个文章该怎么写下去。可能会比较水，不过做事不能虎头蛇尾，所以继续吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;场景五：BehaviorSubject操作符的使用（桥梁）&quot;&gt;&lt;a href=&quot;#场景五：BehaviorSubject操作符的使用（桥梁）&quot; class=&quot;headerlink&quot; title=&quot;场景五：BehaviorSubject操作符的使用（桥梁）&quot;&gt;&lt;/a&gt;场景五：BehaviorSubject操作符的使用（桥梁）&lt;/h2&gt;&lt;p&gt;使用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;制作缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;效果图&lt;br&gt; &lt;br&gt;&lt;img src=&quot;/images/rx/rx-behavior-subject.gif&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缓存管理类  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class DataCache {

  /**
   * 读取磁盘缓存数据
   */
  public List&lt;imageinfobean&gt; readData() {
      ...
  }

  /**
   * 写缓存
   */
  public void writeData(List&lt;imageinfobean&gt; list) {
      ...       
  }

  /**
   * 删除缓存
   */
  public boolean deleteCache() {
      ...
  }
}
&lt;/imageinfobean&gt;&lt;/imageinfobean&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据管理类  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class Data {

  private static Data instance;
  private static final int DATA_SOURCE_MEMORY = 1;//内存
  private static final int DATA_SOURCE_DISK = 2;//硬盘
  private static final int DATA_SOURCE_NETWORK = 3;//网络
  BehaviorSubject&lt;list&lt;imageinfobean&gt;&gt; cache;
  private int dataSource;    

  private Data() {
  }    
  public static Data newInstance() {
      if (instance == null) {
          instance = new Data();
      }
      return instance;
  }    

  private void setDataSource(@DataSource int dataSource) {
      this.dataSource = dataSource;
  }    

  public String getDataSourceText() {
      int dataSourceTextRes;
      switch (dataSource) {
          case DATA_SOURCE_MEMORY:
              dataSourceTextRes = R.string.data_source_memory;
              break;
          case DATA_SOURCE_DISK:
              dataSourceTextRes = R.string.data_source_disk;
              break;
          case DATA_SOURCE_NETWORK:
              dataSourceTextRes = R.string.data_source_network;
              break;
          default:
              dataSourceTextRes = R.string.data_source_network;
      }
      return BaseApplication.getApplication().getString(dataSourceTextRes);
  }    

  /**
   * 请求网络数据
   */
  public void loadData() {    
      Network.getGankApi()
              .getBeauties(80, 1)
              .map(BeautyResult2Beautise.newInstance())
              .doOnNext(new Action1&lt;list&lt;imageinfobean&gt;&gt;() {
                  @Override
                  public void call(List&lt;imageinfobean&gt; list) {
                      DataCache.newInstance().writeData(list);
                  }
              })
              .subscribe(new Action1&lt;list&lt;imageinfobean&gt;&gt;() {
                  @Override
                  public void call(List&lt;imageinfobean&gt; list) {
                      cache.onNext(list);
                  }
              }, new Action1&lt;throwable&gt;() {
                  @Override
                  public void call(Throwable throwable) {
                      throwable.printStackTrace();
                  }
              });    
  }    

  /**
   * 获取数据
   * @param observer
   * @return
   */
  public Subscription subscribeData(@Nullable Observer&lt;list&lt;imageinfobean&gt;&gt; observer) {    
      if (null == cache) {
          cache = BehaviorSubject.create();
          Observable.create(new Observable.OnSubscribe&lt;list&lt;imageinfobean&gt;&gt;() {
              @Override
              public void call(Subscriber&lt;? super List&lt;ImageInfoBean&gt;&gt; subscriber) {
                  //从缓存获取数据
                  List&lt;imageinfobean&gt; list = DataCache.newInstance().readData();    
                  if (null == list) {
                      setDataSource(DATA_SOURCE_NETWORK);
                      //请求网络数据
                      loadData();
                  } else {
                      setDataSource(DATA_SOURCE_DISK);
                      subscriber.onNext(list);
                  }    
              }
          })
                  .subscribeOn(Schedulers.io()).subscribe(cache);    
      } else {
          //内存中获取的数据
          setDataSource(DATA_SOURCE_MEMORY);
      }    
      return cache.observeOn(AndroidSchedulers.mainThread()).subscribe(observer);    
  }    

  /**
   * 清空内存
   */
  public void clearMemoryCache() {
      cache = null;
  }    

  /**
   * 清空内存和硬盘数据
   */
  public void clearMemoryAndDiskCache() {
      clearMemoryCache();
      DataCache.newInstance().deleteCache();
  }
}
&lt;/imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/throwable&gt;&lt;/imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取数据  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    
@OnClick(R.id.load)
public void onClick() {
  startTime = System.currentTimeMillis();
  swipeRefreshLayout.setRefreshing(true);
  unsubscribe();
  subscription = Data.newInstance()
          .subscribeData(getObserver());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在观察者中进行获取数据结果的处理  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
private Observer&lt;list&lt;imageinfobean&gt;&gt; getObserver() {
  if (null == observer) {
      observer = new Observer&lt;list&lt;imageinfobean&gt;&gt;() {
          @Override
          public void onCompleted() {
          }
          @Override
          public void onError(Throwable e) {
              Toast.makeText(getActivity(), R.string.loading_failed, Toast.LENGTH_SHORT).show();
          }
          @Override
          public void onNext(List&lt;imageinfobean&gt; list) {
              swipeRefreshLayout.setRefreshing(false);
              int loadingTime = (int) (System.currentTimeMillis() - startTime);
              dataSituation.setText(getString(R.string.loading_time_and_source, loadingTime, Data.newInstance().getDataSourceText()));
              adapter.setImages(list);
          }
      };
  }
  return observer;
}
&lt;/imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/list&lt;imageinfobean&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详解&lt;br&gt; &lt;br&gt;Subject可以看成是一个桥梁或者代理，在RxJava中同时充当了Observer和Observable的角色。&lt;br&gt; &lt;br&gt;因为它是一个Observer，它可以订阅一个或多个Observable；又因为它是一个Observable，它可以转发它收到(Observe)的数据，也可以发射新的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景六：retryWhen操作符的使用（错误处理）&quot;&gt;&lt;a href=&quot;#场景六：retryWhen操作符的使用（错误处理）&quot; class=&quot;headerlink&quot; title=&quot;场景六：retryWhen操作符的使用（错误处理）&quot;&gt;&lt;/a&gt;场景六：retryWhen操作符的使用（错误处理）&lt;/h2&gt;&lt;p&gt;使用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有的 token 并非一次性的，而是可以多次使用，直到它超时或被销毁（多数 token 都是这样的）。&lt;br&gt;&lt;br&gt;这样的 token 处理起来比较麻烦：需要把它保存起来，并且在发现它失效的时候要能够自动重新获取新的 token 并继续访问之前由于 token 失效而失败的请求。&lt;br&gt;&lt;br&gt;如果项目中有多处的接口请求都需要这样的自动修复机制，使用传统的 Callback 形式需要写出非常复杂的代码。&lt;br&gt;&lt;br&gt;而使用 RxJava ，可以用 retryWhen() 来轻松地处理这样的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;效果图&lt;br&gt; &lt;br&gt;&lt;img src=&quot;/images/rx/rx-retry-when.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Token API准备&lt;br&gt; &lt;br&gt;由于找不到足够简单的用于示例的 token API，以下API是代码伪造的&lt;/p&gt;
&lt;p&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; /**&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created by wangxinarhat on 16-4-5.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TokenApi&lt;br&gt;*/&lt;br&gt;public class TokenApi {&lt;/p&gt;
&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取Observable&lt;/li&gt;
&lt;li&gt;@param auth&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@return&lt;br&gt;*/&lt;br&gt;public static Observable&lt;token&gt; getToken(@NonNull String auth) {&lt;br&gt; return Observable.just(auth).map(new Func1&lt;string, token=&quot;&quot;&gt;() {&lt;/string,&gt;&lt;/token&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public Token call(String s) {

    try {
        Thread.sleep(new Random().nextInt(600) + 600);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

    Token token = new Token();
    token.token = createToken();

    return token;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; });&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;随机生成token&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@return&lt;br&gt;*/&lt;br&gt;private static String createToken() {&lt;/p&gt;
&lt;p&gt; return “token&lt;em&gt;wangxinarhat&lt;/em&gt;“ + System.currentTimeMillis() % 1000;&lt;br&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    /**
     * 根据Token获取用户数据
     * @param token
     * @return
     */
    public static Observable&amp;lt;DataInfo&amp;gt; getData(@NonNull Token token) {
        return Observable.just(token).map(new Func1&amp;lt;Token, DataInfo&amp;gt;() {
            @Override
            public DataInfo call(Token token) {

                try {
                    Thread.sleep(new Random().nextInt(600) + 600);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                if (token.isInvalid) {
                    throw new IllegalArgumentException(&amp;quot;Token is invalid&amp;quot;);
                }
                DataInfo dataInfo = new DataInfo();
                dataInfo.id = (int) (System.currentTimeMillis() % 1000);
                dataInfo.name = &amp;quot;USER_&amp;quot; + dataInfo.id;

                return dataInfo;
            }
        });
    }
}  

&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;

*Token*
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
/**
 *Token类
 */
public class Token {
    public String token;
    public boolean isInvalid;//token是否失效    

    public Token(boolean isInvalid) {
        this.isInvalid = isInvalid;
    }    

    public Token() {
    }
}
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;

*用户数据*

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
/**
 * Created by wangxinarhat on 16-4-5.
 * 用户数据
 */
public class DataInfo {
    public int id;
    public String name;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作符的使用&lt;br&gt; &lt;br&gt;根据token请求数据    &lt;/p&gt;
 &lt;pre&gt;&lt;code&gt;
 @OnClick(R.id.requestBt)
 void request() {
     tokenUpdated = false;
     swipeRefreshLayout.setRefreshing(true);
     unsubscribe();
     final TokenApi tokenApi = new TokenApi();
     subscription = Observable.just(null).flatMap(new Func1&lt;object, rx.observable&lt;datainfo=&quot;&quot;&gt;&gt;() {
         @Override
         public Observable&lt;datainfo&gt; call(Object o) {

             return null == cachedFakeToken.token ?
                     Observable.&lt;datainfo&gt;error(new NullPointerException(&quot;token id null&quot;)) :
                     tokenApi.getData(cachedFakeToken);
         }
     }).retryWhen(new Func1&lt;observable&lt;? extends=&quot;&quot; throwable=&quot;&quot;&gt;, Observable&lt;?&gt;&gt;() {
         @Override
         public Observable&lt;?&gt; call(Observable&lt;? extends Throwable&gt; observable) {
             return observable.flatMap(new Func1&lt;throwable, observable&lt;?=&quot;&quot;&gt;&gt;() {
                 @Override
                 public Observable&lt;?&gt; call(Throwable throwable) {
                     if (throwable instanceof IllegalArgumentException || throwable instanceof NullPointerException) {
                         return tokenApi.getToken(&quot;flat_map&quot;)
                                 .doOnNext(new Action1&lt;token&gt;() {
                                     @Override
                                     public void call(Token token) {
                                         tokenUpdated = true;
                                         cachedFakeToken.token = token.token;
                                         cachedFakeToken.isInvalid = token.isInvalid;
                                     }
                                 });
                     }
                     return Observable.just(throwable);
                 }
             });
         }
     }).subscribeOn(Schedulers.io())
             .observeOn(AndroidSchedulers.mainThread())
             .subscribe(new Action1&lt;datainfo&gt;() {
                 @Override
                 public void call(DataInfo dataInfo) {
                     swipeRefreshLayout.setRefreshing(false);
                     String token = cachedFakeToken.token;
                     if (tokenUpdated) {
                         token += &quot;(&quot; + getString(R.string.updated) + &quot;)&quot;;
                     }
                     tokenTv.setText(String.format(getString(R.string.got_token_and_data), token, dataInfo.id, dataInfo.name));
                 }
             }, new Action1&lt;throwable&gt;() {
                 @Override
                 public void call(Throwable throwable) {
                     swipeRefreshLayout.setRefreshing(false);
                     Toast.makeText(getActivity(), R.string.loading_failed, Toast.LENGTH_SHORT).show();
                 }
             });
 }

 &lt;/throwable&gt;&lt;/datainfo&gt;&lt;/token&gt;&lt;/throwable,&gt;&lt;/observable&lt;?&gt;&lt;/datainfo&gt;&lt;/datainfo&gt;&lt;/object,&gt;&lt;/code&gt;&lt;/pre&gt;
 &lt;br&gt;销毁token
 &lt;pre&gt;&lt;code&gt;
 @OnClick(R.id.invalidateTokenBt)
 void incalidate() {
     cachedFakeToken.isInvalid = true;
     Toast.makeText(getActivity(), R.string.token_expired, Toast.LENGTH_SHORT).show();
 }
 &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详解&lt;/p&gt;
&lt;p&gt; 如果原始Observable遇到错误，重新订阅它期望它能正常终止。&lt;br&gt; &lt;br&gt;retryWhen操作符不会将原始Observable的onError通知传递给观察者，它会订阅这个Observable，再给它一次机会无错误地完成它的数据序列。&lt;br&gt; &lt;br&gt;retryWhen总是传递onNext通知给观察者，由于重新订阅，可能会造成数据项重复。&lt;br&gt; &lt;br&gt;无论收到多少次onError通知，无参数版本的retryWhen都会继续订阅并发射原始Observable。&lt;br&gt; &lt;br&gt;接受单个count参数的retryWhen会最多重新订阅指定的次数，如果次数超了，它不会尝试再次订阅，它会把最新的一个onError通知传递给它的观察者。&lt;br&gt; &lt;br&gt;还有一个版本的retryWhen接受一个谓词函数作为参数，这个函数的两个参数是：重试次数和导致发射onError通知的Throwable。这个函数返回一个布尔值，如果返回true，retryWhen应该再次订阅和镜像原始的Observable，如果返回false，retryWhen会将最新的一个onError通知传递给它的观察者。&lt;br&gt; &lt;br&gt;retryWhen操作符默认在trampoline调度器上执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景七：Debounce操作符的使用（过滤）&quot;&gt;&lt;a href=&quot;#场景七：Debounce操作符的使用（过滤）&quot; class=&quot;headerlink&quot; title=&quot;场景七：Debounce操作符的使用（过滤）&quot;&gt;&lt;/a&gt;场景七：Debounce操作符的使用（过滤）&lt;/h2&gt;&lt;p&gt;使用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实时搜索，如果在EditText中监听到字符改变就发起请求数据，明显不合适。&lt;br&gt;&lt;br&gt;有了Debounce操作符，仅在过了指定的一段时间还没发射数据时才发射一个数据，Debounce操作符会过滤掉发射速率过快的数据项，优化网络请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;效果图&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/rx/rx-debounce.gif&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码&lt;br&gt; &lt;br&gt;配合jakewharton大神的rxbinding使用，获取可观察对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);
    setLogger();
    //使用rxbing给EditText注册字符改变事件
    subscription = RxTextView.textChangeEvents(input)
            .debounce(500, TimeUnit.MILLISECONDS)//设置发射时间间隔
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(getObserver());
}
&lt;/code&gt;&lt;/pre&gt;    

&lt;p&gt;&lt;br&gt;在观察者中进行结果处理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     
private Observer&lt;? super TextViewTextChangeEvent&gt; getObserver() {

    return new Observer&lt;textviewtextchangeevent&gt;() {
        @Override
        public void onCompleted() {
        }

        @Override
        public void onError(Throwable e) {
        }
        @Override
        public void onNext(TextViewTextChangeEvent textViewTextChangeEvent) {
            //得到搜索关键字，进行网络请求
            log(String.format(&quot;搜索关键字 ： %s&quot;, textViewTextChangeEvent.text().toString()));
        }
    };
}
&lt;/textviewtextchangeevent&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;更新adapter数据集&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     
private void log(String logMsg) {

    if (isCurrentlyOnMainThread()) {
        mLogs.add(0, logMsg + &quot; (main thread) &quot;);
        mAdapter.notifyDataSetChanged();

    } else {
        mLogs.add(0, logMsg + &quot; (NOT main thread) &quot;);
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                mAdapter.notifyDataSetChanged();
            }
        });

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详解&lt;br&gt;&lt;br&gt;Debounce仅在过了一段指定的时间还没发射数据时才发射一个数据,会根据设置的时间间隔过滤掉发射速率过快的数据项。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景八：Buffer操作符的使用（变换）&quot;&gt;&lt;a href=&quot;#场景八：Buffer操作符的使用（变换）&quot; class=&quot;headerlink&quot; title=&quot;场景八：Buffer操作符的使用（变换）&quot;&gt;&lt;/a&gt;场景八：Buffer操作符的使用（变换）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定期收集Observable的数据放进一个数据包裹，然后发射这些数据包裹，而不是一次发射一个值。&lt;br&gt;&lt;br&gt;&lt;br&gt;这个操作符，我暂时还没有比较好的使用场景，不过既然是可以定期收集数据，那么应该可以做指定时间内点击次数等之类的统计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;效果图&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/rx/rx-buffer.gif&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码&lt;br&gt; &lt;br&gt;还是使用jakewharton大神的rxbinding，注册点击事件获取可观察对象     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);
    setLogger();
    subscription = RxView.clicks(btn)
            .map(new Func1&lt;void, integer=&quot;&quot;&gt;() {
                @Override
                public Integer call(Void aVoid) {
                    log(&quot;点击一次&quot;);
                    return 1;
                }
            })
            .buffer(3, TimeUnit.SECONDS)//设置收集数据时间间隔为3s
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(getObserver());
}    
&lt;/void,&gt;&lt;/code&gt;&lt;/pre&gt;   
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详解&lt;br&gt;&lt;br&gt;Buffer操作符将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;还有就是：&lt;/em&gt;如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;&lt;br&gt;因为我也才尝试使用rx，这篇终于挤出来了，好难。。代码在&lt;a href=&quot;https://github.com/wangxinarhat/RxAndroidSamples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;br&gt;&lt;br&gt;如果又学到新的使用场景，还是会再写&lt;a href=&quot;https://github.com/wangxinarhat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;我是从国内rx大神&lt;a href=&quot;https://github.com/rengwuxian/RxJavaSamples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;扔物线&lt;/a&gt;，还有github上star数最多的那位哥们儿(&lt;a href=&quot;https://github.com/kaushikgopal/RxJava-Android-Samples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kaushikgopal&lt;/a&gt;)学习的。因为他们都没有很详细的说明操作符的使用，所以才想写这个文章。&lt;br&gt;&lt;br&gt;如想深入学习，请看大神代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近比较忙，也没想好这个文章该怎么写下去。可能会比较水，不过做事不能虎头蛇尾，所以继续吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;场景五：BehaviorSubject操作符的使用（桥梁）&quot;&gt;&lt;a href=&quot;#场景五：BehaviorSubject操作符的使用（桥梁）&quot; class=&quot;headerlink&quot; title=&quot;场景五：BehaviorSubject操作符的使用（桥梁）&quot;&gt;&lt;/a&gt;场景五：BehaviorSubject操作符的使用（桥梁）&lt;/h2&gt;&lt;p&gt;使用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;制作缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;效果图&lt;br&gt; &lt;br/&gt;&lt;img src=&quot;/images/rx/rx-behavior-subject.gif&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Rxjava" scheme="http://yoursite.com/categories/Rxjava/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Rxjava/Android/"/>
    
    
      <category term="rxjava" scheme="http://yoursite.com/tags/rxjava/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
      <category term="rxbind" scheme="http://yoursite.com/tags/rxbind/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符在android中的使用场景详解（一）</title>
    <link href="http://yoursite.com/2016/04/19/2016-04-19-rxjava-android-operate1/"/>
    <id>http://yoursite.com/2016/04/19/2016-04-19-rxjava-android-operate1/</id>
    <published>2016-04-19T14:00:00.000Z</published>
    <updated>2016-06-12T06:45:12.471Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近学习了RxJava在android中的使用，关于RxJava是啥，为什么要用RxJava，好在哪，这里就不叙述了，如果想要了解请移步&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;、&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大神文章&lt;/a&gt;。 &lt;br&gt;&lt;br&gt;这里只讲解一下RxJava中的操作符在项目中具体的使用场景。&lt;br&gt;&lt;br&gt;因为学习了有20个操作符，可能一篇文章过于臃肿，所以打算写成系列文章，本文中所有操作符的使用，都写在了一个demo中，已上传至&lt;a href=&quot;https://github.com/wangxinarhat/RxAndroidSamples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;场景一：RxJava基本使用&quot;&gt;&lt;a href=&quot;#场景一：RxJava基本使用&quot; class=&quot;headerlink&quot; title=&quot;场景一：RxJava基本使用&quot;&gt;&lt;/a&gt;场景一：RxJava基本使用&lt;/h2&gt;&lt;p&gt;配合Retrofit请求网络数据，如果你对Retrofit不熟悉就先看&lt;a href=&quot;http://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit官网&lt;/a&gt;，实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先是build.gradle的配置&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; compile ‘io.reactivex:rxandroid:1.1.0’&lt;br&gt; compile ‘io.reactivex:rxjava:1.1.0’&lt;br&gt; compile ‘com.squareup.retrofit2:retrofit:2.0.0-beta3’&lt;br&gt; compile ‘com.squareup.retrofit2:adapter-rxjava:2.0.0-beta3’&lt;br&gt; compile ‘com.squareup.retrofit2:converter-gson:2.0.0-beta3’5&lt;br&gt; compile ‘com.jakewharton:butterknife:7.0.1’&lt;br&gt; &lt;/code&gt;&lt;/pre&gt;&lt;br&gt; &lt;br&gt;也就是说本文是基于RxJava1.1.0和Retrofit 2.0.0-beta3来进行的。添加rxandroid是因为rxjava中的线程问题。&lt;/li&gt;
&lt;li&gt;基本网络请求使用准备&lt;br&gt; &lt;br&gt;我们使用&lt;a href=&quot;http://zhuangbi.info/search?q=param测试连接，返回的是json格式，代码就不贴了。接下来我们要创建一个接口取名为ZhuangbiApi，代码如下：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhuangbi.info/search?q=param测试连接，返回的是json格式，代码就不贴了。接下来我们要创建一个接口取名为ZhuangbiApi，代码如下：&lt;/a&gt;&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; public interface ZhuangbiApi {&lt;pre&gt;&lt;code&gt;@GET(&amp;quot;search&amp;quot;)
Observable&amp;lt;List&amp;lt;ImageInfoBean&amp;gt;&amp;gt; search(@Query(&amp;quot;q&amp;quot;) String query);
&lt;/code&gt;&lt;/pre&gt; }&lt;br&gt; &lt;/code&gt;&lt;/pre&gt;&lt;br&gt; &lt;br&gt;Retrofit、Gson、RxJava结合使用，建立网络请求类：&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt;  public static ZhuangbiApi getZhuangbiApi() {&lt;pre&gt;&lt;code&gt;    if (zhuangbiApi == null) {
        Retrofit retrofit = new Retrofit.Builder()
                .client(okHttpClient)
                .baseUrl(&amp;quot;http://zhuangbi.info/&amp;quot;)
                .addConverterFactory(gsonConverterFactory)
                .addCallAdapterFactory(rxJavaCallAdapterFactory)
                .build();
        zhuangbiApi = retrofit.create(ZhuangbiApi.class);
    }
    return zhuangbiApi;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体使用&lt;br&gt; &lt;br&gt;将要查询的关键字传进去，使用上面建立的网络请求类请求数据，并在订阅者的回调方法中，进行网络请求结果的处理&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt;  private void search(String key) {    &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subscription = Network.getZhuangbiApi()
        .search(key)
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(getObserver());
}        
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; private Observer&amp;lt;? super List&lt;imageinfobean&gt;&amp;gt; getObserver() {&lt;/imageinfobean&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (null == observer) {
    observer = new Observer&amp;lt;List&amp;lt;ImageInfoBean&amp;gt;&amp;gt;() {
        @Override
        public void onCompleted() {

        }

        @Override
        public void onError(Throwable e) {
            swipeRefreshLayout.setRefreshing(false);
            Toast.makeText(getActivity(), R.string.loading_failed, Toast.LENGTH_SHORT).show();
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;            @Override
            public void onNext(List&amp;lt;ImageInfoBean&amp;gt; images) {

                swipeRefreshLayout.setRefreshing(false);
                adapter.setImages(images);
            }
        };
    }

    return observer;
}    
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;详解&lt;br&gt;&lt;br&gt;search方法中传入的key是要查询的关键词，getObserver()是获取订阅者对象，并在其回调方法中根据返回结果，做相应处理：&lt;ul&gt;
&lt;li&gt;其中onNext方法返回了数据，这样我们能够在onNext里面处理数据相关的逻辑；&lt;/li&gt;
&lt;li&gt;onError方法中处理错误，同时也可以停止ProgressDialog等；&lt;/li&gt;
&lt;li&gt;onComplated只调用一次结束本次请求操作，也可以停止ProgressDialog；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景二：Map操作符的使用（变换）&quot;&gt;&lt;a href=&quot;#场景二：Map操作符的使用（变换）&quot; class=&quot;headerlink&quot; title=&quot;场景二：Map操作符的使用（变换）&quot;&gt;&lt;/a&gt;场景二：Map操作符的使用（变换）&lt;/h2&gt;&lt;p&gt;对Observable发射的每一项数据应用一个函数，执行变换为指定类型的操作，然后再发射。&lt;/p&gt;
&lt;p&gt;有些服务端的接口设计，会在返回的数据外层包裹一些额外信息，这些信息对于调试很有用，但本地显示是用不到的。使用 map() 可以把外层的格式剥掉，只留下我们只关心的部分，具体实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;网络请求使用准备&lt;br&gt; &lt;br&gt;我们使用&lt;a href=&quot;http://gank.io/api/测试连接&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gank.io/api/测试连接&lt;/a&gt;&lt;br&gt; &lt;br&gt;接下来我们要创建一个接口取名为GankApi ，代码如下：&lt;/p&gt;
&lt;p&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; public interface GankApi {&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@GET(&amp;quot;data/福利/{number}/{page}&amp;quot;)
Observable&amp;lt;BeautyResult&amp;gt; getBeauties(@Path(&amp;quot;number&amp;quot;) int number, @Path(&amp;quot;page&amp;quot;) int page);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }    &lt;/p&gt;
&lt;p&gt; &lt;br&gt; &lt;br&gt;Retrofit、Gson、RxJava结合使用，建立网络请求类：&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt;  public static GankApi getGankApi() {&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    if (gankApi == null) {
        Retrofit retrofit = new Retrofit.Builder()
                .client(okHttpClient)
                .baseUrl(&amp;quot;http://gank.io/api/&amp;quot;)
                .addConverterFactory(gsonConverterFactory)
                .addCallAdapterFactory(rxJavaCallAdapterFactory)
                .build();
        gankApi = retrofit.create(GankApi.class);
    }
    return gankApi;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;数据转换&lt;br&gt; &lt;br&gt;返回数据就不贴了，有兴趣可以请求接口看一下。&lt;br&gt; &lt;br&gt;接口返回的数据包含了一些额外的信息，但是我们只需要返回数据中的list部分，所以创建一个类，来实现数据转换的功能，代码如下：&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; public class BeautyResult2Beautise implements Func1&lt;beautyresult, list&lt;imageinfobean=&quot;&quot;&gt;&amp;gt; {&lt;/beautyresult,&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    public static BeautyResult2Beautise newInstance() {
        return new BeautyResult2Beautise();
    }


    /**
     * 将接口返回的BeautyResult数据中的list部分提取出来，返回集合List&amp;lt;ImageInfoBean&amp;gt;
     * @param beautyResult
     * @return
     */
    @Override
    public List&amp;lt;ImageInfoBean&amp;gt; call(BeautyResult beautyResult) {

        List&amp;lt;ImageInfoBean&amp;gt; imageInfoBeanList = new ArrayList&amp;lt;&amp;gt;(beautyResult.results.size());

        for (ImageInfoBean bean : beautyResult.results) {
            ImageInfoBean imageInfoBean = new ImageInfoBean();

            imageInfoBean.description = bean.desc;

            imageInfoBean.image_url = bean.url;

            imageInfoBeanList.add(imageInfoBean);

        }

        return imageInfoBeanList;
    }
}    
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作符的使用&lt;br&gt; &lt;br&gt;加载数据&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; /**&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 加载数据的方法
 * @param page
 */
private void loadPage(int page) {
    mSwipeRefreshLayout.setRefreshing(true);
    unsubscribe();
    subscription = Network.getGankApi()
            .getBeauties(8, page)
            .map(BeautyResult2Beautise.newInstance())
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(getObserver());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;br&gt; &lt;br&gt;订阅者&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; /**&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 获取订阅者
 * @return
 */
private Observer&amp;lt;? super List&amp;lt;ImageInfoBean&amp;gt;&amp;gt; getObserver() {

    if (null == observer) {
        observer = new Observer&amp;lt;List&amp;lt;ImageInfoBean&amp;gt;&amp;gt;() {
            @Override
            public void onCompleted() {
                mSwipeRefreshLayout.setRefreshing(false);
            }

            @Override
            public void onError(Throwable e) {
                mSwipeRefreshLayout.setRefreshing(false);

                Toast.makeText(getActivity(), R.string.loading_failed, Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onNext(List&amp;lt;ImageInfoBean&amp;gt; images) {
                adapter.setImages(images);
            }
        };
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;        return observer;
    }    
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;详解&lt;br&gt; &lt;br&gt;Map操作符对Observable发射的每一项数据应用一个函数，执行变换操作，然后返回一个发射这些结果的Observable。&lt;br&gt; 本例中，接口返回的数据格式是：&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; public class BeautyResult {&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    public boolean error;

    public List&amp;lt;ImageInfoBean&amp;gt; results;


}
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;
&amp;lt;br/&amp;gt;但是我们只关心list部分的数据，所以进行转换操作，这样订阅者回调方法中拿到的数据直接进行使用就好了
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;场景三：Zip操作符的使用（结合）&quot;&gt;&lt;a href=&quot;#场景三：Zip操作符的使用（结合）&quot; class=&quot;headerlink&quot; title=&quot;场景三：Zip操作符的使用（结合）&quot;&gt;&lt;/a&gt;场景三：Zip操作符的使用（结合）&lt;/h2&gt;&lt;p&gt;通过一个函数将多个Observables的发射物结合到一起，基于这个函数的结果为每个结合体发射单个数据项，具体实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;网络请求装备&lt;br&gt;&lt;br&gt;网络请求Api，以及请求类，还是使用场景一、二中的创建好的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求数据，并结合，代码如下：&lt;br&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt; /**&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 请求两个接口，对返回的数据进行结合
 */
private void load() {

    swipeRefreshLayout.setRefreshing(true);
    subscription = Observable.zip(Network.getGankApi().getBeauties(188, 1).map(BeautyResult2Beautise.newInstance()),
            Network.getZhuangbiApi().search(&amp;quot;装逼&amp;quot;),
            new Func2&amp;lt;List&amp;lt;ImageInfoBean&amp;gt;, List&amp;lt;ImageInfoBean&amp;gt;, List&amp;lt;ImageInfoBean&amp;gt;&amp;gt;() {
                @Override
                public List&amp;lt;ImageInfoBean&amp;gt; call(List&amp;lt;ImageInfoBean&amp;gt; imageInfoBeen, List&amp;lt;ImageInfoBean&amp;gt; imageInfoBeen2) {

                    int num = imageInfoBeen.size() &amp;lt; imageInfoBeen2.size() ? imageInfoBeen.size() : imageInfoBeen2.size();
                    List&amp;lt;ImageInfoBean&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
                    for (int i = 0; i &amp;lt; num; i++) {

                        list.add(imageInfoBeen.get(i));
                        list.add(imageInfoBeen2.get(i));

                    }

                    return list;
                }
            }).subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(getObserver());
}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详解&lt;br&gt;&lt;br&gt;请求GankApi中的数据使用map操作符进行转换，取出自己想要的list数据，然后结合ZhuangbiApi中的数据，形成新的数据集合，填充到view。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Zip操作符使用函数按顺序结合多个Observables发射的数据项，然后它发射这个函数返回的结果，它只发射与数据项最少的那个Observable一样多的数据。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;一般app中同一个界面有时会需要同时访问不同接口，然后将结果糅合后转为统一的格式后输出（例如将第三方广告 API 的广告夹杂进自家平台返回的数据 List 中）。这种并行的异步处理比较麻烦，不过用了 zip() 之后就会简单明了。&lt;br&gt;&lt;br&gt;上一个效果图：&lt;br&gt;&lt;img src=&quot;/images/rx/rx-zip.jpg&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;br&gt;可以看出，recyclerView中使用了一个数据集合，但左侧的一列展示的是GankApi中的数据，右侧一列展示的是ZhuangbiApi 中的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景四：CombineLatest操作符的使用（结合）&quot;&gt;&lt;a href=&quot;#场景四：CombineLatest操作符的使用（结合）&quot; class=&quot;headerlink&quot; title=&quot;场景四：CombineLatest操作符的使用（结合）&quot;&gt;&lt;/a&gt;场景四：CombineLatest操作符的使用（结合）&lt;/h2&gt;&lt;p&gt;结合多个Observable发射的最近数据项，当原始Observables的任何一个发射了一条数据时，CombineLatest使用一个函数结合它们最近发射的数据，然后发射这个函数的返回值，具体实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用场景，用一个简单明了的图片来表示吧&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/rx/rx-combine.gif&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上图简单演示了CombineLatest的使用场景，看代码吧：&lt;br&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt; /**&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 将3个EditText的事件进行结合
 */
private void combineLatestEvent() {

    usernameObservable = RxTextView.textChanges(mUsername).skip(1);
    emailObservable = RxTextView.textChanges(mEmail).skip(1);
    passwordObservable = RxTextView.textChanges(mPassword).skip(1);

    subscription = Observable.combineLatest(usernameObservable, emailObservable, passwordObservable,
            new Func3&amp;lt;CharSequence, CharSequence, CharSequence, Boolean&amp;gt;() {
                @Override
                public Boolean call(CharSequence userName, CharSequence email, CharSequence password) {

                    boolean isUserNameValid = !TextUtils.isEmpty(userName) &amp;amp;&amp;amp; (userName.toString().length() &amp;gt; 2 &amp;amp;&amp;amp; userName.toString().length() &amp;lt; 9);

                    if (!isUserNameValid) {
                        mUsername.setError(&amp;quot;用户名无效&amp;quot;);
                    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;                        boolean isEmailValid = !TextUtils.isEmpty(email) &amp;amp;&amp;amp; Patterns.EMAIL_ADDRESS.matcher(email).matches();

                        if (!isEmailValid) {
                            mEmail.setError(&amp;quot;邮箱无效&amp;quot;);
                        }

                        boolean isPasswordValid = !TextUtils.isEmpty(password) &amp;amp;&amp;amp; (password.toString().length() &amp;gt; 6 &amp;amp;&amp;amp; password.toString().length() &amp;lt; 11);

                        if (!isPasswordValid) {
                            mPassword.setError(&amp;quot;密码无效&amp;quot;);
                        }


                        return isUserNameValid &amp;amp;&amp;amp; isEmailValid &amp;amp;&amp;amp; isPasswordValid;
                    }
                })
                .subscribe(getObserver());
    }


/**
     * 获取订阅者
     * @return
     */
    private Observer&amp;lt;Boolean&amp;gt; getObserver() {
        return new Observer&amp;lt;Boolean&amp;gt;() {
            @Override
            public void onCompleted() {

            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onNext(Boolean aBoolean) {
                //更改注册按钮是否可用的状态
                mButton.setEnabled(aBoolean);
            }
        };
    }

&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;详解&lt;br&gt;&lt;br&gt;CombineLatest操作符行为类似于zip，但是只有当原始的Observable中的每一个都发射了一条数据时zip才发射数据。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;CombineLatest则在原始的Observable中任意一个发射了数据时发射一条数据。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;当原始Observables的任何一个发射了一条数据时，CombineLatest使用一个函数结合它们最近发射的数据，然后发射这个函数的返回值。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;本例中，含用户名、邮箱、密码、注册按钮的注册页面的场景非常常见，当然可以使用普通的处理方式能够达成，注册按钮的是否可用更改的效果，以及输入是否合法的及时提示。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;但是使用RxJava的方式，代码明显简洁、易懂。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;&lt;br&gt;虽然，上面四个使用场景主要介绍四个操作符的使用，但其实demo中穿插了不少其他操作符的使用，想要详细了解的话，代码在&lt;a href=&quot;https://github.com/wangxinarhat/RxAndroidSamples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;暂时先写到这里，后面会把其他自己学会的的操作符，写成系列文章。如有兴趣，请关注我的&lt;a href=&quot;https://github.com/wangxinarhat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近学习了RxJava在android中的使用，关于RxJava是啥，为什么要用RxJava，好在哪，这里就不叙述了，如果想要了解请移步&lt;a href=&quot;http://reactivex.io/&quot;&gt;官方文档&lt;/a&gt;、&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot;&gt;大神文章&lt;/a&gt;。 &lt;br&gt;&lt;br&gt;这里只讲解一下RxJava中的操作符在项目中具体的使用场景。&lt;br&gt;&lt;br&gt;因为学习了有20个操作符，可能一篇文章过于臃肿，所以打算写成系列文章，本文中所有操作符的使用，都写在了一个demo中，已上传至&lt;a href=&quot;https://github.com/wangxinarhat/RxAndroidSamples&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;场景一：RxJava基本使用&quot;&gt;&lt;a href=&quot;#场景一：RxJava基本使用&quot; class=&quot;headerlink&quot; title=&quot;场景一：RxJava基本使用&quot;&gt;&lt;/a&gt;场景一：RxJava基本使用&lt;/h2&gt;&lt;p&gt;配合Retrofit请求网络数据，如果你对Retrofit不熟悉就先看&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit官网&lt;/a&gt;，实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先是build.gradle的配置&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; compile ‘io.reactivex:rxandroid:1.1.0’&lt;br&gt; compile ‘io.reactivex:rxjava:1.1.0’&lt;br&gt; compile ‘com.squareup.retrofit2:retrofit:2.0.0-beta3’&lt;br&gt; compile ‘com.squareup.retrofit2:adapter-rxjava:2.0.0-beta3’&lt;br&gt; compile ‘com.squareup.retrofit2:converter-gson:2.0.0-beta3’5&lt;br&gt; compile ‘com.jakewharton:butterknife:7.0.1’&lt;br&gt; &lt;/pre&gt;&lt;/code&gt;&lt;br&gt; &lt;br/&gt;也就是说本文是基于RxJava1.1.0和Retrofit 2.0.0-beta3来进行的。添加rxandroid是因为rxjava中的线程问题。&lt;/li&gt;
&lt;li&gt;基本网络请求使用准备&lt;br&gt; &lt;br/&gt;我们使用&lt;a href=&quot;http://zhuangbi.info/search?q=param测试连接，返回的是json格式，代码就不贴了。接下来我们要创建一个接口取名为ZhuangbiApi，代码如下：&quot;&gt;http://zhuangbi.info/search?q=param测试连接，返回的是json格式，代码就不贴了。接下来我们要创建一个接口取名为ZhuangbiApi，代码如下：&lt;/a&gt;&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt; public interface ZhuangbiApi {&lt;pre&gt;&lt;code&gt;@GET(&amp;quot;search&amp;quot;)
Observable&amp;lt;List&amp;lt;ImageInfoBean&amp;gt;&amp;gt; search(@Query(&amp;quot;q&amp;quot;) String query);
&lt;/code&gt;&lt;/pre&gt; }&lt;br&gt; &lt;/pre&gt;&lt;/code&gt;&lt;br&gt; &lt;br/&gt;Retrofit、Gson、RxJava结合使用，建立网络请求类：&lt;br&gt; &lt;pre&gt;&lt;code&gt;&lt;br&gt;  public static ZhuangbiApi getZhuangbiApi() {&lt;pre&gt;&lt;code&gt;    if (zhuangbiApi == null) {
        Retrofit retrofit = new Retrofit.Builder()
                .client(okHttpClient)
                .baseUrl(&amp;quot;http://zhuangbi.info/&amp;quot;)
                .addConverterFactory(gsonConverterFactory)
                .addCallAdapterFactory(rxJavaCallAdapterFactory)
                .build();
        zhuangbiApi = retrofit.create(ZhuangbiApi.class);
    }
    return zhuangbiApi;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/pre&gt;&lt;/code&gt;
    
    </summary>
    
      <category term="Rxjava" scheme="http://yoursite.com/categories/Rxjava/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Rxjava/Android/"/>
    
    
      <category term="rxjava" scheme="http://yoursite.com/tags/rxjava/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
      <category term="rxbind" scheme="http://yoursite.com/tags/rxbind/"/>
    
  </entry>
  
  <entry>
    <title>Material Design风格SearchView实现</title>
    <link href="http://yoursite.com/2016/03/18/2016-03-18-meterial-design-search-view/"/>
    <id>http://yoursite.com/2016/03/18/2016-03-18-meterial-design-search-view/</id>
    <published>2016-03-18T15:00:00.000Z</published>
    <updated>2016-06-12T07:31:55.559Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;项目里要做一个对列表内容的筛选，想到了知乎以及google play的效果，确定了是用Toolbar、SearchView、RecyclerView实现&lt;br&gt;&lt;br&gt;&lt;em&gt;Toolbar&lt;/em&gt;不用多说，如有不懂我也上传到了&lt;a href=&quot;https://github.com/wangxinarhat/MaterialDesignSamples.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Recycler&lt;/em&gt;我之前也写过Demo，同样上传到了&lt;a href=&quot;https://github.com/wangxinarhat/MaterialDesignSamples.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;br&gt;难搞的是&lt;em&gt;SearchView&lt;/em&gt;，毕竟现在都流行&lt;em&gt;Material Design&lt;/em&gt;了嘛，自带的那个效果实在不敢恭维，网上搜了下，已有大神实现了MaterialDesign效果的SearchView，所以拿来用咯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ui/search-view1.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;代码-已上传至github&quot;&gt;&lt;a href=&quot;#代码-已上传至github&quot; class=&quot;headerlink&quot; title=&quot;代码(已上传至github)&quot;&gt;&lt;/a&gt;代码(&lt;a href=&quot;https://github.com/wangxinarhat/RecyclerViewFilterDemo.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;已上传至github&lt;/a&gt;)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化操作&lt;/p&gt;
&lt;p&gt; @Override&lt;br&gt; protected void onCreate(Bundle savedInstanceState) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);    
ButterKnife.bind(this);    
initView();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }   &lt;/p&gt;
&lt;p&gt; private void initView() {    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;initToolBar();
initRecyclerView();
initSearchView();    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;/**
 * init Toolbar
 */
private void initToolBar() {
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
    getSupportActionBar().setDisplayShowTitleEnabled(false);
}


/**
 * init RecyclerView
 */
private void initRecyclerView() {

    LinearLayoutManager layoutManager = new LinearLayoutManager(this);
    recyclerView.setLayoutManager(layoutManager);

    mPeopleList = new ArrayList&amp;lt;&amp;gt;();

    String[] peopleName = {&amp;quot;Kaka&amp;quot;, &amp;quot;Modric&amp;quot;, &amp;quot;Rooney&amp;quot;, &amp;quot;Ibla&amp;quot;, &amp;quot;Bale&amp;quot;, &amp;quot;死神&amp;quot;, &amp;quot;Maurice Moss&amp;quot;, &amp;quot;Roy Trenneman&amp;quot;, &amp;quot;林夕&amp;quot;, &amp;quot;sina&amp;quot;, &amp;quot;google&amp;quot;, &amp;quot;ecust&amp;quot;};
    String[] peopleDes = {&amp;quot;The best player&amp;quot;, &amp;quot;莫德里奇是最好的后腰&amp;quot;, &amp;quot;鲁尼踢得不好&amp;quot;, &amp;quot;伊贝拉是谁？&amp;quot;, &amp;quot;贝尔跑得真快&amp;quot;, &amp;quot;Aaron&amp;quot;, &amp;quot;Oh, four, I mean five, I mean fire!&amp;quot;, &amp;quot;哈哈&amp;quot;, &amp;quot;是个艺术家&amp;quot;, &amp;quot;weibo&amp;quot;, &amp;quot;android&amp;quot;, &amp;quot;china&amp;quot;};

    for (int i = 0; i &amp;lt; peopleName.length; i++) {
        mPeopleList.add(new People(peopleName[i], peopleDes[i]));
    }

    mAdapter = new SearchPeopleAdapter(mPeopleList);
    recyclerView.setAdapter(mAdapter);
    HeaderAdapter headerAdapter = new HeaderAdapter(mAdapter);

    recyclerView.setAdapter(headerAdapter);
    recyclerView.addOnItemTouchListener(new RecyclerOnItemClickListener(this, recyclerView, this));   
}

/**
 * init SearchView
 */
private void initSearchView() {    
    searchView.setVoiceSearch(false);
    searchView.setCursorDrawable(R.drawable.custom_cursor);
    searchView.setEllipsize(true);
    searchView.setOnQueryTextListener(new MaterialSearchView.OnQueryTextListener() {
        @Override
        public boolean onQueryTextSubmit(String query) {    
            return true;
        }

        @Override
        public boolean onQueryTextChange(String newText) {
            final List&amp;lt;People&amp;gt; filteredModelList = filter(mPeopleList, newText);

            //reset
            mAdapter.setFilter(filteredModelList);
            mAdapter.animateTo(filteredModelList);
            recyclerView.scrollToPosition(0);
            return true;
        }
    });

    searchView.setOnSearchViewListener(new MaterialSearchView.SearchViewListener() {
        @Override
        public void onSearchViewShown() {
        }

        @Override
        public void onSearchViewClosed() {
            mAdapter.setFilter(mPeopleList);
        }
    });

}


 /**
 * 搜索按钮
 *
 * @param menu
 * @return
 */
@Override
public boolean onCreateOptionsMenu(Menu menu) {

    getMenuInflater().inflate(R.menu.menu_search, menu);
    MenuItem item = menu.findItem(R.id.action_search);
    searchView.setMenuItem(item);

    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;筛选逻辑&lt;/p&gt;
&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;筛选逻辑&lt;/li&gt;
&lt;li&gt;@param peoples&lt;/li&gt;
&lt;li&gt;@param query&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@return&lt;br&gt;*/&lt;br&gt;private List&lt;people&gt; filter(List&lt;people&gt; peoples, String query) {&lt;br&gt; query = query.toLowerCase();&lt;/people&gt;&lt;/people&gt;&lt;/p&gt;
&lt;p&gt; final List&lt;people&gt; filteredModelList = new ArrayList&amp;lt;&amp;gt;();&lt;br&gt; for (People people : peoples) {&lt;/people&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;final String nameEn = people.getName().toLowerCase();
final String desEn = people.getDescription().toLowerCase();
final String name = people.getName();
final String des = people.getDescription();

if (name.contains(query) || des.contains(query) || nameEn.contains(query) || desEn.contains(query)) {

    filteredModelList.add(people);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; return filteredModelList;&lt;br&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目里要做一个对列表内容的筛选，想到了知乎以及google play的效果，确定了是用Toolbar、SearchView、RecyclerView实现&lt;br&gt;&lt;br/&gt;&lt;em&gt;Toolbar&lt;/em&gt;不用多说，如有不懂我也上传到了&lt;a href=&quot;https://github.com/wangxinarhat/MaterialDesignSamples.git&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;br/&gt;&lt;em&gt;Recycler&lt;/em&gt;我之前也写过Demo，同样上传到了&lt;a href=&quot;https://github.com/wangxinarhat/MaterialDesignSamples.git&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;br/&gt;难搞的是&lt;em&gt;SearchView&lt;/em&gt;，毕竟现在都流行&lt;em&gt;Material Design&lt;/em&gt;了嘛，自带的那个效果实在不敢恭维，网上搜了下，已有大神实现了MaterialDesign效果的SearchView，所以拿来用咯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ui/search-view1.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Material Design" scheme="http://yoursite.com/categories/Material-Design/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Material-Design/Android/"/>
    
    
      <category term="Toolbar" scheme="http://yoursite.com/tags/Toolbar/"/>
    
      <category term="SearchView" scheme="http://yoursite.com/tags/SearchView/"/>
    
      <category term="google play" scheme="http://yoursite.com/tags/google-play/"/>
    
      <category term="知乎" scheme="http://yoursite.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>Git分支 - 新建 合并</title>
    <link href="http://yoursite.com/2015/06/19/2015-06-19-git-study-branch/"/>
    <id>http://yoursite.com/2015/06/19/2015-06-19-git-study-branch/</id>
    <published>2015-06-19T15:00:00.000Z</published>
    <updated>2016-06-12T08:09:58.983Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;给自己看的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Git-分支-分支的新建&quot;&gt;&lt;a href=&quot;#Git-分支-分支的新建&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支的新建&quot;&gt;&lt;/a&gt;Git 分支 - 分支的新建&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b iss53
Switched to a new branch &amp;quot;iss53&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;它是下面两条命令的简写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch iss53
$ git checkout iss53
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Git-分支-分支的合并&quot;&gt;&lt;a href=&quot;#Git-分支-分支的合并&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支的合并&quot;&gt;&lt;/a&gt;Git 分支 - 分支的合并&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;假设你已经修正了 #53 问题，并且打算将你的工作合并入 master 分支。 为此，你需要合并 iss53 分支到 master 分支。 你只需要检出到你想合并入的分支，然后运行 git merge 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &amp;apos;master&amp;apos;
$ git merge iss53
Merge made by the &amp;apos;recursive&amp;apos; strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这和你之前合并 hotfix 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的工作祖先（C2），做一个简单的三方合并。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;既然你的修改已经合并进来了，你已经不再需要 iss53 分支了。 现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d iss53
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;遇到冲突时的分支合并&quot;&gt;&lt;a href=&quot;#遇到冲突时的分支合并&quot; class=&quot;headerlink&quot; title=&quot;遇到冲突时的分支合并&quot;&gt;&lt;/a&gt;遇到冲突时的分支合并&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。 如果你对 #53 问题的修改和有关 hotfix 的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 git status 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &amp;quot;git commit&amp;quot;)

Unmerged paths:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)

    both modified:      index.html

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:index.html
&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt;
=======
&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;
 please contact us at support@github.com
&amp;lt;/div&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53:index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（======= 的上半部分），而 iss53 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;
please contact us at email.support@github.com
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;上述的冲突解决方案仅保留了其中一个分支的修改，并且 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; , ======= , 和 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 这些行被完全删除了。 在你解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。&lt;/p&gt;
&lt;h2 id=&quot;Git-分支-分支管理&quot;&gt;&lt;a href=&quot;#Git-分支-分支管理&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支管理&quot;&gt;&lt;/a&gt;Git 分支 - 分支管理&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
  iss53
* master
  testing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;注意 master 分支前的 * 字符：它代表现在检出的那一个分支（也就是说，当前 HEAD 指针所指向的分支）。 这意味着如果在这时候提交，master 分支将会随着新的工作向前移动。 如果需要查看每一个分支的最后一次提交，可以运行 git branch -v 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch &amp;apos;iss53&amp;apos;
  testing 782fd34 add scott to the author list in the readmes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;–merged 与 –no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行 git branch –merged：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch --merged
  iss53
* master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;因为之前已经合并了 iss53 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;查看所有包含未合并工作的分支，可以运行 git branch –no-merged：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch --no-merged
  testing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 git branch -d 命令删除它时会失败：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d testing
error: The branch &amp;apos;testing&amp;apos; is not fully merged.
If you are sure you want to delete it, run &amp;apos;git branch -D testing&amp;apos;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 -D 选项强制删除它。&lt;/p&gt;
&lt;h2 id=&quot;Git-分支-分支开发工作流&quot;&gt;&lt;a href=&quot;#Git-分支-分支开发工作流&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支开发工作流&quot;&gt;&lt;/a&gt;Git 分支 - 分支开发工作流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;长期分支&lt;br&gt;&amp;emsp;&amp;emsp;因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些特性分支合并入其他分支中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一般在 master 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码，还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 master 分支了。 这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。&lt;br&gt;&amp;emsp;&amp;amp;emsp通常把他们想象成流水线（work silos）可能更好理解一点，那些经过测试考验的提交会被遴选到更加稳定的流水线上去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特性分支&lt;br&gt;&amp;emsp;&amp;emsp;特性分支对任何规模的项目都适用，是一种短期分支，它被用来实现单一特性或其相关工作，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;你已经在上一节中你创建的 iss53 和 hotfix 特性分支中看到过这种用法。 你在上一节用到的特性分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在特性分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。&lt;/p&gt;
&lt;h2 id=&quot;Git-分支-远程分支&quot;&gt;&lt;a href=&quot;#Git-分支-远程分支&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 远程分支&quot;&gt;&lt;/a&gt;Git 分支 - 远程分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;推送&lt;br&gt;&amp;emsp;&amp;emsp;当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步 - 你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push (remote) (branch):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -&amp;gt; serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix，那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;你也可以运行 git push origin serverfix:serverfix，它会做同样的事 - 相当于它说，“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -&amp;gt; origin/serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch &amp;apos;serverfix&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟踪分支&lt;br&gt;&amp;emsp;&amp;emsp;从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 &lt;code&gt;git checkout -b [branch] [remotename]/[branch]&lt;/code&gt;。 这是一个十分常用的操作所以 Git 提供了 –track 快捷方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch &amp;apos;serverfix&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拉取&lt;br&gt;&amp;emsp;&amp;emsp;当 &lt;code&gt;git fetch&lt;/code&gt; 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 &lt;code&gt;git pull&lt;/code&gt; 在大多数情况下它的含义是一个 &lt;code&gt;git fetch&lt;/code&gt; 紧接着一个 &lt;code&gt;git merge&lt;/code&gt; 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 &lt;code&gt;clone&lt;/code&gt; 或 &lt;code&gt;checkout&lt;/code&gt; 命令为你创建的，&lt;code&gt;git pull&lt;/code&gt; 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于&lt;code&gt;git pull&lt;/code&gt;的用法经常令人困惑所以通常单独显式地使用 &lt;code&gt;fetch&lt;/code&gt; 与 &lt;code&gt;merge&lt;/code&gt; 命令会更好一些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除远程分支&lt;br&gt;&amp;emsp;&amp;emsp;假设你已经通过远程分支做完所有的工作了 - 也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 &lt;code&gt;--delete&lt;/code&gt; 选项的 &lt;code&gt;git push&lt;/code&gt; 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：&lt;/p&gt;
&lt;p&gt;  $ git push origin –delete serverfix&lt;br&gt;  To &lt;a href=&quot;https://github.com/schacon/simplegit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/schacon/simplegit&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- [deleted]         serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给自己看的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Git-分支-分支的新建&quot;&gt;&lt;a href=&quot;#Git-分支-分支的新建&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支的新建&quot;&gt;&lt;/a&gt;Git 分支 - 分支的新建&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b iss53
Switched to a new branch &amp;quot;iss53&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;它是下面两条命令的简写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch iss53
$ git checkout iss53
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Git-分支-分支的合并&quot;&gt;&lt;a href=&quot;#Git-分支-分支的合并&quot; class=&quot;headerlink&quot; title=&quot;Git 分支 - 分支的合并&quot;&gt;&lt;/a&gt;Git 分支 - 分支的合并&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;假设你已经修正了 #53 问题，并且打算将你的工作合并入 master 分支。 为此，你需要合并 iss53 分支到 master 分支。 你只需要检出到你想合并入的分支，然后运行 git merge 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &amp;apos;master&amp;apos;
$ git merge iss53
Merge made by the &amp;apos;recursive&amp;apos; strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这和你之前合并 hotfix 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的工作祖先（C2），做一个简单的三方合并。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;既然你的修改已经合并进来了，你已经不再需要 iss53 分支了。 现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d iss53
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Branch" scheme="http://yoursite.com/tags/Branch/"/>
    
  </entry>
  
  <entry>
    <title>Git 基础 - 获取 Git 仓库</title>
    <link href="http://yoursite.com/2015/06/18/2015-06-18-git-study-base/"/>
    <id>http://yoursite.com/2015/06/18/2015-06-18-git-study-base/</id>
    <published>2015-06-18T15:00:00.000Z</published>
    <updated>2016-06-12T07:56:20.887Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;给自己看的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在现有目录初始化仓库&quot;&gt;&lt;a href=&quot;#在现有目录初始化仓库&quot; class=&quot;headerlink&quot; title=&quot;在现有目录初始化仓库&quot;&gt;&lt;/a&gt;在现有目录初始化仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。&lt;/p&gt;
&lt;h2 id=&quot;克隆现有的仓库&quot;&gt;&lt;a href=&quot;#克隆现有的仓库&quot; class=&quot;headerlink&quot; title=&quot;克隆现有的仓库&quot;&gt;&lt;/a&gt;克隆现有的仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果你想获得一份已经存在了的 Git 仓库的拷贝，，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库（虽然可能会丢失某些服务器端的挂钩设置，但是所有版本的数据仍在，详见 在服务器上搭建 Git ）。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;克隆仓库的命令格式是 &lt;code&gt;git clone [url]&lt;/code&gt;。 比如，要克隆 Git 的可链接库 RxAndroidSamples，可以用下面的命令：&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git clone https://github.com/wangxinarhat/RxAndroidSamples.git&lt;/code&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git clone https://github.com/wangxinarhat/RxAndroidSamples.git define-name&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git-基础-记录每次更新到仓库&quot;&gt;&lt;a href=&quot;#Git-基础-记录每次更新到仓库&quot; class=&quot;headerlink&quot; title=&quot;Git 基础 - 记录每次更新到仓库&quot;&gt;&lt;/a&gt;Git 基础 - 记录每次更新到仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。&lt;br&gt;&lt;br&gt;工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。&lt;/p&gt;
&lt;h2 id=&quot;检查当前文件状态&quot;&gt;&lt;a href=&quot;#检查当前文件状态&quot; class=&quot;headerlink&quot; title=&quot;检查当前文件状态&quot;&gt;&lt;/a&gt;检查当前文件状态&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;跟踪新文件&quot;&gt;&lt;a href=&quot;#跟踪新文件&quot; class=&quot;headerlink&quot; title=&quot;跟踪新文件&quot;&gt;&lt;/a&gt;跟踪新文件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用命令 git add 开始跟踪一个文件,再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add README
$ git status
On branch master
Changes to be committed:
(use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。  git add 命令使用&lt;em&gt;文件或目录的路径&lt;/em&gt;作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;暂存已修改文件&quot;&gt;&lt;a href=&quot;#暂存已修改文件&quot; class=&quot;headerlink&quot; title=&quot;暂存已修改文件&quot;&gt;&lt;/a&gt;暂存已修改文件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 CONTRIBUTING.md 的已被跟踪的文件，然后运行 git status 命令，会看到下面内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;文件 CONTRIBUTING.md 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为&lt;em&gt;“添加内容到下一次提交中”&lt;/em&gt;而不是“将一个文件添加到项目中”要更加合适。 现在让我们运行 git add 将”CONTRIBUTING.md”放到暂存区，然后再看看 git status 的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 CONTRIBUTING.md 里再加条注释， 重新编辑存盘后，准备好提交。 不过且慢，再运行 git status 看看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;怎么回事？ 现在 CONTRIBUTING.md 文件同时出现在暂存区和非暂存区。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本， 如果你现在提交，CONTRIBUTING.md 的版本是你最后一次运行 git add 命令时的那个版本，而不是你运行 git commit 时，在工作目录中的当前版本。 所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;状态简览&quot;&gt;&lt;a href=&quot;#状态简览&quot; class=&quot;headerlink&quot; title=&quot;状态简览&quot;&gt;&lt;/a&gt;状态简览&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;git status 命令的输出十分详细，但其用语有些繁琐。 如果你使用 git status -s 命令或 git status –short 命令，你将得到一种更为紧凑的格式输出。 运行 git status -s ，状态报告输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;忽略文件&quot;&gt;&lt;a href=&quot;#忽略文件&quot; class=&quot;headerlink&quot; title=&quot;忽略文件&quot;&gt;&lt;/a&gt;忽略文件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 &lt;/p&gt;
&lt;h2 id=&quot;查看已暂存和未暂存的修改&quot;&gt;&lt;a href=&quot;#查看已暂存和未暂存的修改&quot; class=&quot;headerlink&quot; title=&quot;查看已暂存和未暂存的修改&quot;&gt;&lt;/a&gt;查看已暂存和未暂存的修改&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。&lt;/p&gt;
&lt;h2 id=&quot;提交更新&quot;&gt;&lt;a href=&quot;#提交更新&quot; class=&quot;headerlink&quot; title=&quot;提交更新&quot;&gt;&lt;/a&gt;提交更新&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit.&lt;/p&gt;
&lt;h2 id=&quot;跳过使用暂存区域&quot;&gt;&lt;a href=&quot;#跳过使用暂存区域&quot; class=&quot;headerlink&quot; title=&quot;跳过使用暂存区域&quot;&gt;&lt;/a&gt;跳过使用暂存区域&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：&lt;br&gt;&amp;emsp;&amp;emsp;&lt;code&gt;$ git commit -a -m &amp;#39;des&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;移除文件&quot;&gt;&lt;a href=&quot;#移除文件&quot; class=&quot;headerlink&quot; title=&quot;移除文件&quot;&gt;&lt;/a&gt;移除文件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with &amp;apos;origin/master&amp;apos;.
Changes not staged for commit:
  (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;然后再运行 git rm 记录此次移除文件的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm PROJECTS.md
rm &amp;apos;PROJECTS.md&amp;apos;
$ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    deleted:    PROJECTS.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 –cached 选项：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm --cached README
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 比方说：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm log/\*.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;注意到星号 * 之前的反斜杠 \， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 类似的比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm \*~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该命令为删除以 ~ 结尾的所有文件。&lt;/p&gt;
&lt;h2 id=&quot;Git-基础-查看提交历史&quot;&gt;&lt;a href=&quot;#Git-基础-查看提交历史&quot; class=&quot;headerlink&quot; title=&quot;Git 基础 - 查看提交历史&quot;&gt;&lt;/a&gt;Git 基础 - 查看提交历史&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史. 完成这个任务最简单而又有效的工具是 git log 命令。&lt;/p&gt;
&lt;h2 id=&quot;Git-基础-撤消操作&quot;&gt;&lt;a href=&quot;#Git-基础-撤消操作&quot; class=&quot;headerlink&quot; title=&quot;Git 基础 - 撤消操作&quot;&gt;&lt;/a&gt;Git 基础 - 撤消操作&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。&lt;/p&gt;
&lt;h2 id=&quot;Git-基础-远程仓库的使用&quot;&gt;&lt;a href=&quot;#Git-基础-远程仓库的使用&quot; class=&quot;headerlink&quot; title=&quot;Git 基础 - 远程仓库的使用&quot;&gt;&lt;/a&gt;Git 基础 - 远程仓库的使用&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;为了能在任意 Git 项目上协作，你需要知道如何管理自己的远程仓库。 远程仓库是指托管在因特网或其他网络中的你的项目的版本库。 你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。&lt;/p&gt;
&lt;h2 id=&quot;查看远程仓库&quot;&gt;&lt;a href=&quot;#查看远程仓库&quot; class=&quot;headerlink&quot; title=&quot;查看远程仓库&quot;&gt;&lt;/a&gt;查看远程仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果想查看你已经配置的远程仓库服务器，可以运行 git remote 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin - 这是 Git 给你克隆的仓库服务器的默认名字：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
origin    https://github.com/schacon/ticgit (fetch)
origin    https://github.com/schacon/ticgit (push)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果你的远程仓库不止一个，该命令会将它们全部列出。 例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这样我们可以轻松拉取其中任何一个用户的贡献。 此外，我们大概还会有某些远程仓库的推送权限，虽然我们目前还不会在此介绍。&lt;/p&gt;
&lt;h2 id=&quot;添加远程仓库&quot;&gt;&lt;a href=&quot;#添加远程仓库&quot; class=&quot;headerlink&quot; title=&quot;添加远程仓库&quot;&gt;&lt;/a&gt;添加远程仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;运行 git remote add &lt;shortname&gt; &lt;url&gt; 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写：&lt;/url&gt;&lt;/shortname&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin    https://github.com/schacon/ticgit (fetch)
origin    https://github.com/schacon/ticgit (push)
pb    https://github.com/paulboone/ticgit (fetch)
pb    https://github.com/paulboone/ticgit (push)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -&amp;gt; pb/master
 * [new branch]      ticgit     -&amp;gt; pb/ticgit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在 Paul 的 master 分支可以在本地通过 pb/master 访问到 - 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支。&lt;/p&gt;
&lt;h2 id=&quot;从远程仓库中抓取与拉取&quot;&gt;&lt;a href=&quot;#从远程仓库中抓取与拉取&quot; class=&quot;headerlink&quot; title=&quot;从远程仓库中抓取与拉取&quot;&gt;&lt;/a&gt;从远程仓库中抓取与拉取&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;$ git fetch [remote-name]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果你有一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。 这对你来说可能是一个更简单或更舒服的工作流程；默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。&lt;/p&gt;
&lt;h2 id=&quot;推送到远程仓库&quot;&gt;&lt;a href=&quot;#推送到远程仓库&quot; class=&quot;headerlink&quot; title=&quot;推送到远程仓库&quot;&gt;&lt;/a&gt;推送到远程仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;当你想分享你的项目时，必须将其推送到上游。 这个命令很简单：&lt;code&gt;git push [remote-name] [branch-name]&lt;/code&gt;。 当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。&lt;/p&gt;
&lt;h2 id=&quot;查看远程仓库-1&quot;&gt;&lt;a href=&quot;#查看远程仓库-1&quot; class=&quot;headerlink&quot; title=&quot;查看远程仓库&quot;&gt;&lt;/a&gt;查看远程仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果想要查看某一个远程仓库的更多信息，可以使用 &lt;code&gt;git remote show [remote-name]&lt;/code&gt;命令。&lt;/p&gt;
&lt;h2 id=&quot;远程仓库的移除与重命名&quot;&gt;&lt;a href=&quot;#远程仓库的移除与重命名&quot; class=&quot;headerlink&quot; title=&quot;远程仓库的移除与重命名&quot;&gt;&lt;/a&gt;远程仓库的移除与重命名&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 例如，想要将 pb 重命名为 paul，可以用 git remote rename 这样做：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote rename pb paul
$ git remote
origin
paul
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 pb/master 的现在会引用 paul/master。&lt;br&gt;&amp;emsp;&amp;emsp;如果因为一些原因想要移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了 - 可以使用 git remote rm ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote rm paul
$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给自己看的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在现有目录初始化仓库&quot;&gt;&lt;a href=&quot;#在现有目录初始化仓库&quot; class=&quot;headerlink&quot; title=&quot;在现有目录初始化仓库&quot;&gt;&lt;/a&gt;在现有目录初始化仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;&lt;/br&gt;&amp;emsp;&amp;emsp;该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。&lt;/p&gt;
&lt;h2 id=&quot;克隆现有的仓库&quot;&gt;&lt;a href=&quot;#克隆现有的仓库&quot; class=&quot;headerlink&quot; title=&quot;克隆现有的仓库&quot;&gt;&lt;/a&gt;克隆现有的仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果你想获得一份已经存在了的 Git 仓库的拷贝，，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库（虽然可能会丢失某些服务器端的挂钩设置，但是所有版本的数据仍在，详见 在服务器上搭建 Git ）。&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;克隆仓库的命令格式是 &lt;code&gt;git clone [url]&lt;/code&gt;。 比如，要克隆 Git 的可链接库 RxAndroidSamples，可以用下面的命令：&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git clone https://github.com/wangxinarhat/RxAndroidSamples.git&lt;/code&gt;&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：&lt;br&gt;&lt;br/&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git clone https://github.com/wangxinarhat/RxAndroidSamples.git define-name&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git-基础-记录每次更新到仓库&quot;&gt;&lt;a href=&quot;#Git-基础-记录每次更新到仓库&quot; class=&quot;headerlink&quot; title=&quot;Git 基础 - 记录每次更新到仓库&quot;&gt;&lt;/a&gt;Git 基础 - 记录每次更新到仓库&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。&lt;br&gt;&lt;br/&gt;工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。&lt;/p&gt;
&lt;h2 id=&quot;检查当前文件状态&quot;&gt;&lt;a href=&quot;#检查当前文件状态&quot; class=&quot;headerlink&quot; title=&quot;检查当前文件状态&quot;&gt;&lt;/a&gt;检查当前文件状态&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;跟踪新文件&quot;&gt;&lt;a href=&quot;#跟踪新文件&quot; class=&quot;headerlink&quot; title=&quot;跟踪新文件&quot;&gt;&lt;/a&gt;跟踪新文件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用命令 git add 开始跟踪一个文件,再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add README
$ git status
On branch master
Changes to be committed:
(use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   README
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;emsp;&amp;emsp;只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。  git add 命令使用&lt;em&gt;文件或目录的路径&lt;/em&gt;作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Base" scheme="http://yoursite.com/tags/Base/"/>
    
  </entry>
  
</feed>
